ggcorrplot(mat, p.mat)
ggcorrplot(mat, p.mat = "sig.level")
ggcorrplot(mat)
ggcorrplot(mat, p.mat = p.mat)
ggcorrplot(mat,type = "upper", title = "Matriz de Correlación de europa")
ggcorrplot(mat,type = "upper", title = "Matriz de Correlación de europa", tl.srt = 0)
ggcorrplot(mat,type = "upper", title = "Matriz de Correlación de europa")
prcomp(europa)
prcomp(europa[,2:8])
prcomp(europa[,2:8])$sdev
(prcomp(europa[,2:8])$sdev)^2
prcomp(europa[,2:8], scale=TRUE)
(prcomp(europa[,2:8], scale=TRUE)$sdev)^2
prcomp(europa[,2:8], scale=TRUE)$rotation
prcomp(europa[,2:8], scale=TRUE)$rotation$PC1
prcomp(europa[,2:8], scale=TRUE)$rotation[,1]
pca1 = prcomp(europa[,2:8])
biplot(pca1, scale = 0)
biplot(pca1)
pca2 = prcomp(europa[,2:8], scale=TRUE)
biplot(pca2)
biplot(pca1,
col=c('blue', 'red'),
cex=c(1, 1.3),
xlim=c(-.4, .4),
main='PCA Results',
xlab='First Component',
ylab='Second Component',
expand=1.2)
biplot(results,
col=c('blue', 'red'),
cex=c(1, 1.3),
xlim=c(-.6, .6),
main='PCA Results',
xlab='PCA1',
ylab='PCA2',
expand=1.5)
biplot(pca1,
col=c('blue', 'red'),
cex=c(1, 1.3),
xlim=c(-.6, .6),
main='PCA Results',
xlab='PCA1',
ylab='PCA2',
expand=1.5)
biplot(pca1,
col=c('blue', 'red'),
cex=c(1, 1.3),
xlim=c(-.6, .6),
main='Resultados PCA',
xlab='PCA1',
ylab='PCA2',
expand=1.5)
biplot(pca1,
col=c('blue', 'red'),
cex=c(1, 1.3),
xlim=c(-.05, .6),
main='Resultados PCA',
xlab='PCA1',
ylab='PCA2',
expand=1.5)
biplot(pca1,
xlim=c(-.05, .6), ylimc(-0.05,0.05)
main='Resultados PCA',
xlab='PCA1',
ylab='PCA2',
expand=1.2)
biplot(pca1,xlim=c(-.05, .6), ylimc(-0.05,0.05),main='Resultados PCA',xlab='PCA1',ylab='PCA2',expand=1.2)
biplot(pca1,xlim=c(-.05, .6), ylim=c(-0.05,0.05),main='Resultados PCA',xlab='PCA1',ylab='PCA2',expand=1.2)
biplot(pca2,xlim=c(-.4, .4), ylim=c(-0.4,0.4),main='Resultados PCA',xlab='PCA1',ylab='PCA2',expand=1.2)
biplot(pca2,xlim=c(-.5, .4), ylim=c(-0.4,0.3),main='Resultados PCA',xlab='PCA1',ylab='PCA2',expand=1.2)
#ii) biplot de PCA Corr
pca2 = (europa[,2:8], scale=TRUE)
#ii) biplot de PCA Corr
pca2 = prcomp(europa[,2:8], scale=TRUE)
#ejercicio 2
#a) importo datos del archivo europa
europa = read.csv("ECD/Fundamentos/TP2/europe.csv")
#Analizo la correlacion de las variables
mat = cor(europa[,2:8])
library(ggcorrplot)
ggcorrplot(mat,type = "upper",
title = "Corrplot de europa")
#ii) realizo PCA con CORR
prcomp(europa[,2:8], scale=TRUE)
source("~/ECD/Fundamentos/TP2/Ramiro Vozzi.R")
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_course.csv")
datos
attach(datos)
hist(pemax)
datos[1,]
datos[,1]
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_course.csv", sep=" ")
datos
datos=as.data.frame(datos)
datos
attatch(datos)
attach()
attach(datos)
hist(pemax)
boxplot(pemax)
names(datos)
plot(age,pemax)
plot(height,pemax)
plot(weight,pemax)
regresion = lm(pemax~., data=datos)
summary(regression)
summary(regresion)
RSS = ((regresion$coefficients)^2)/length(regresion$coefficients)
RSS
pcr.set = pcr(pemax~.,scale=TRUE,data=datos)
install.packages(pls)
library(pls)
install.packages("pls")
library(pls)
pcr.set = pcr(pemax~.,scale=TRUE,data=datos)
pcr.set
summary(pcr.set)
summary(regresion)
pca.predict = predict(pcr.set, datos.test, ncomp = 5)
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_exercice.csv", sep=" ")
datos
names(datos)
dim(datos)
?get_sample
install.packages("funModeling")
library(funModeling)
sample = get_sample(data=datos, percentage_tr_rows = 0.8, seed=1234)
train = datos[sample,]
test = datos[-sample,]
attach(train)
reg_simple = lm(weight~.,data=datos)
summary(reg_simple)
reg_simple = lm(weight~.,data=train)
summary(reg_simple)
#Descargo el archivo
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_exercice.csv", sep=" ")
#separo en train y test
sample = get_sample(data=datos, percentage_tr_rows = 0.8, seed=1234)
train = datos[sample,]
test = datos[-sample,]
attach(train)
library(funModeling)
#Descargo el archivo
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_exercice.csv", sep=" ")
#separo en train y test
library(funModeling)
sample = get_sample(data=datos, percentage_tr_rows = 0.8, seed=1234)
train = datos[sample,]
test = datos[-sample,]
attach(train)
#realizo la regresion simple sobre el set de train
reg_simple = lm(weight~.,data=train)
summary(reg_simple)
residuos_simple=rstandard(reg_simple)
valores_simple=fitted(reg_simple)
plot(valores_simple,residuos_simple)
?plot
plot(valores_simple,residuos_simple)
plot(valores_simple,residuos_simple, ylab = "Residuos", xlab="Predichos", main = "Residuos segun el valor Predicho")
qqnorm(residuos_simple)
qqline(residuos_simple)
pcr.set=pcr(weight~.,scale=TRUE,data=train)
library(pls)
pcr.set=pcr(weight~.,scale=TRUE,data=train)
summary(pcr.set)
pcr.set$scores
pcr.set$model
?pcr
mean(train$weight)
rss = sum((pcr.set$fitted.values-train$weight)^2)
tss = sum((train$weight-mean(train$weight))^2)
1-rss/tss
pcr.set$fitted.values
rss = sum((pcr.set$fitted.values-train$weight)^2)
tss = sum((train$weight-mean(train$weight))^2)
1-rss/tss
1-(rss/tss)
cor(train$weight,pcr.set$fitted.values)^2
dim(train$weight)
weight
cor(weight,pcr.set$fitted.values)^2
dim(pcr.set$fitted.values)
pcr.set$fitted.values
dim(pcr.set$fitted.values)
pcr.set$fitted.values[,]
pcr.set$fitted.values[,1,1]
predict(pcr.set,train)
dim(predict(pcr.set,train))
pcr.set$residuals
cor(weight,as.numeric(pcr.set$fitted.values))^2
as.numeric(pcr.set$fitted.values)
dim(as.numeric(predict(pcr.set,train))
#ejercicio 2
#a) importo datos del archivo europa
europa = read.csv("ECD/Fundamentos/TP2/europe.csv")
europa
#separo en train y test
library(funModeling)
sample = get_sample(data=datos, percentage_tr_rows = 0.8, seed=1234)
#Descargo el archivo
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_exercice.csv", sep=" ")
sample = get_sample(data=datos, percentage_tr_rows = 0.8, seed=1234)
train = datos[sample,]
test = datos[-sample,]
attach(train)
mixed = lm(weight~., data = datos)
mixed
ols_step_all_possible(mixed)
library("olsrr")
install.packages("olsrr")
install.packages("olsrr")
install.packages("olsrr")
install.packages("olsrr")
library(olsrr)
ols_step_all_possible(mixed)
ols_step_all_possible(mixed)
#hago la reg lineal con pls
library(pls)
pcr.set=pcr(weight~.,scale=TRUE,data=train)
pcr.set$coefficients
predict(pcr.set,data=datos)
pcr.set=pcr(weight~.,scale=TRUE,data=train)
pcr.set$scores
pcr.set
summary(pcr.set)
plot(pcr.set,type="l")
pcr.set=pcr(weight~.,scale=TRUE,data=train, ncomp=13)
pcr.set$fitted.values
dim(pcr.set$fitted.values)
pcr.set$fitted.values[,,13]
sum(pcr.set$fitted.values[,,13]-train$weight)
RSS = sum((pcr.set$fitted.values[,,13]-train$weight)^2)
RSS
TSS = sum((train$weight-mean(train$weight))^2)
TSS
1-(RSS/TSS)
Rcuad = 1-(RSS/TSS)
Radj = 1-((1-Rcuad)*(nrow(train)-1)/(nrow(train)-14))
Radj
pcr.set$coefficients[,,13]
pcr.set$model[,,13]
pcr.set$projection[,,13]
pcr.set$projection
str(pcr.set$projection)
str(pcr.set$projection)
typeof(pcr.set$projection)
train
colMeans(train)
train[-train$weight]
train[,1]
head(train)
train[,names(train) != "weight"]
(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"])
ss
train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"])
(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"]))*pcr.set$projection
dim(train)
dim(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"]))
dim(pcr.set$projection)
library(mmr)
install.packages("mmr")
library(mmr)
mm(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"]),pcr.set$projection)
Y_pca = mm(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"]),pcr.set$projection)
Y_pca = cbind(train$weight,Y_pca)
head(Y_pca)
attach(Y_pca)
recta = lm(weight~.,data=Y_pca)
Y_pca
recta = lm(train$weight~.,data=Y_pca)
summary(recta)
colnames(Y_pca)
detach(Y_pca)
recta = lm(train$weight~.,data=Y_pca)
summary(recta)
library(mmr)
Y_pca = mm(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"]),pcr.set$projection)
Y_pca = cbind(train$weight,Y_pca)
attach(Y_pca)
recta = lm(train$weight~.,data=Y_pca)
summary(recta)
#realizo la regresion simple sobre el set de train
reg_simple = lm(weight~.,data=train)
summary(reg_simple)
Y_pca
colnames(Y_pca)
colnames(Y_pca) = c('weight', 'Comp 1', 'Comp 2', 'Comp 3', 'Comp 4', 'Comp 5', 'Comp 6', 'Comp 7', 'Comp 8', 'Comp 9', 'Comp 10', 'Comp 11', 'Comp 12', 'Comp 13')
colnames(Y_pca)
attach(Y_pca)
recta = lm(weight~.,data=Y_pca)
summary(recta)
#armo Y=(X-X_raya)*E
library(mmr)
Y_pca = mm(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"]),pcr.set$projection)
Y_pca = cbind(train$weight,Y_pca)
colnames(Y_pca) = c('weight', 'Comp 1', 'Comp 2', 'Comp 3', 'Comp 4', 'Comp 5', 'Comp 6', 'Comp 7', 'Comp 8', 'Comp 9', 'Comp 10', 'Comp 11', 'Comp 12', 'Comp 13')
attach(Y_pca)
recta = lm(weight~.,data=Y_pca)
summary(recta)
residuos_pca=rstandard(recta)
valores_pca=fitted(recta)
plot(valores_pca,residuos_pca, ylab = "Residuos", xlab="Predichos", main = "Residuos segun el valor Predicho")
qqnorm(residuos_pca)
qqline(residuos_pca)
#Descargo el archivo
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_exercice.csv", sep=" ")
#separo en train y test
library(funModeling)
sample = get_sample(data=datos, percentage_tr_rows = 0.8, seed=1234)
train = datos[sample,]
test = datos[-sample,]
attach(train)
#realizo la regresion simple sobre el set de train
reg_simple = lm(weight~.,data=train)
library(olsrr)
ols_step_both_p(reg_simple)
reg_mixed = lm(weight ~ waist.girth+knee.girth+height+thigh.girth+chest.girth+calf.girth+hip.girth+forearm.girth+age+knee.diam+chest.depth+shoulder.girth)
summary(reg_mixed)
residuos_simple=rstandard(reg_mixed)
valores_simple=fitted(reg_mixed)
plot(valores_simple,residuos_simple, ylab = "Residuos", xlab="Predichos", main = "Residuos segun el valor Predicho")
#analizo la independencia de residuos de la reg simple
residuos_mixed=rstandard(reg_mixed)
valores_mixed=fitted(reg_mixed)
plot(valores_mixed,residuos_mixed, ylab = "Residuos", xlab="Predichos", main = "Residuos segun el valor Predicho")
#analizo el supuesto de norm de la reg mixed
qqnorm(residuos_mixed)
qqline(residuos_mixed)
ols_step_both_p(reg_simple)
ols_step_both_p(reg_simple, pent = 0.05, prem = 0.05)
#Descargo el archivo
datos = read.csv("ECD/Fundamentos/TP3/data_multiple_regression_exercice.csv", sep=" ")
#separo en train y test
library(funModeling)
sample = get_sample(data=datos, percentage_tr_rows = 0.8, seed=1234)
train = datos[sample,]
test = datos[-sample,]
attach(train)
#realizo la regresion simple sobre el set de train
reg_simple = lm(weight~.,data=train)
summary(reg_simple)
#analizo la independencia de residuos de la reg simple
residuos_simple=rstandard(reg_simple)
valores_simple=fitted(reg_simple)
plot(valores_simple,residuos_simple, ylab = "Residuos", xlab="Predichos", main = "Residuos segun el valor Predicho")
#analizo el supuesto de norm de la reg simple
qqnorm(residuos_simple)
qqline(residuos_simple)
#hago la reg lineal con mixed selection
library(olsrr)
ols_step_both_p(reg_simple)
reg_mixed = lm(weight ~ waist.girth+knee.girth+height+thigh.girth+chest.girth+calf.girth+hip.girth+forearm.girth+age+knee.diam+chest.depth+shoulder.girth)
summary(reg_mixed)
#analizo la independencia de residuos de la reg mixed
residuos_mixed=rstandard(reg_mixed)
valores_mixed=fitted(reg_mixed)
plot(valores_mixed,residuos_mixed, ylab = "Residuos", xlab="Predichos", main = "Residuos segun el valor Predicho")
#analizo el supuesto de norm de la reg mixed
qqnorm(residuos_mixed)
qqline(residuos_mixed)
#hago la reg lineal con pls
library(pls)
pcr.set=pcr(weight~.,scale=TRUE,data=train)
summary(pcr.set)
#de aca saco que tengo que usar las primeras
#13 componentes para asegurarme el 95% de la var
pcr.set=pcr(weight~.,scale=TRUE,data=train, ncomp=13)
#armo Y=(X-X_raya)*E
library(mmr)
Y_pca = mm(train[,names(train) != "weight"]-colMeans(train[,names(train) != "weight"]),pcr.set$projection)
Y_pca = cbind(train$weight,Y_pca)
colnames(Y_pca) = c('weight', 'Comp 1', 'Comp 2', 'Comp 3', 'Comp 4', 'Comp 5', 'Comp 6', 'Comp 7', 'Comp 8', 'Comp 9', 'Comp 10', 'Comp 11', 'Comp 12', 'Comp 13')
attach(Y_pca)
recta = lm(weight~.,data=Y_pca)
summary(recta)
#analizo la independencia de residuos de la reg pca
residuos_pca=rstandard(recta)
valores_pca=fitted(recta)
plot(valores_pca,residuos_pca, ylab = "Residuos", xlab="Predichos", main = "Residuos segun el valor Predicho")
#analizo el supuesto de norm de la reg pca
qqnorm(residuos_pca)
qqline(residuos_pca)
predict(reg_simple,data=test)
pred_simple = predict(reg_simple,data=test)
ECM_simple = (1/nrow(test))*sum((test$weight-pred_simple)^2)
nrow(pred_simple)
length(pred_simple)
nrow(test)
nrow(train)
test[,names(test) != "weight"]
nrow(test[,names(test) != "weight"])
pred_simple = predict(reg_simple,data=test[,names(test) != "weight"])
pred_simple
ECM_simple = (1/nrow(test))*sum((test$weight-pred_simple)^2)
ECM_simple
summary(reg_mixed)
ols_step_both_p(reg_simple)
nrow(pred_simple)
length(pred_simple)
reg_simple
?predict
pred_simple = predict(reg_simple,newdata=test[,names(test) != "weight"])
length(pred_simple)
ECM_simple = (1/nrow(test))*sum((test$weight-pred_simple)^2)
ECM_simple
pred_mixed = predict(reg_mixed,newdata=test[,names(test) != "weight"])
ECM_mixed = (1/nrow(test))*sum((test$weight-pred_mixed)^2)
ECM_mixed
pred_pca = predict(recta,newdata=test[,names(test) != "weight"])
length(pred_pca)
detach(Y_pca)
pred_pca = predict(recta,newdata=test[,names(test) != "weight"])
Y_pca_test = mm(test[,names(test) != "weight"]-colMeans(test[,names(test) != "weight"]),pcr.set$projection)
Y_pca_test
colnames(Y_pca_test)
pred_pca = predict(recta,newdata=Y_pca_test)
ECM_pca = (1/nrow(Y_pca_test))*sum((test$weight-pred_pca)^2)
ECM_pca
nrow(Y_pca_test)
ECM_pca
ECM_mixed
ECM_simple
acath = load("ECD/Fundamentos/TP4/acath.sav")
?load
acath = load("ECD/Fundamentos/TP4/acath.sav")
acath = load("C:/Users/rvozzi/OneDrive - genommalabinternacional/Documentos/ECD/Fundamentos/TP 4/acath.sav")
acath
view(acath)
load("C:/Users/rvozzi/OneDrive - genommalabinternacional/Documentos/ECD/Fundamentos/TP 4/acath.sav")
a = c(rep("Caseros",5))
a
x1=[11,1,7,15, 11, 13, 11, 16, 10, 15, 18, 12, 9, 9, 10, 10, 15, 10, 14, 10, 10, 12, 14, 12, 15, 7, 13, 6,10, 15, 20, 10, 13, 10, 6, 14, 8, 10, 8, 11]
x1=c(11,1,7,15, 11, 13, 11, 16, 10, 15, 18, 12, 9, 9, 10, 10, 15, 10, 14, 10, 10, 12, 14, 12, 15, 7, 13, 6,10, 15, 20, 10, 13, 10, 6, 14, 8, 10, 8, 11)
x1
x2 = c(13, 10, 12, 7, 5, 10, 10, 16, 9, 7, 7, 2, 6, 9, 9, 8, 8, 10, 3, 6, 5, 2, 9, 3, 4, 5, 10, 8, 5, 9, 10, 8,13, 10, 0, 2, 1, 1, 0, 4)
x3 = c(6, 7, 3, 5, 9, 6, 1, 6, 0, 2, 5, 6, 11, 6, 7, 0, 5, 7, 5, 4, 7, 4, 2, 8, 9, 6, 1, 4, 7, 7, 8, 9, 7, 5, 1, 6, 9, 4,7, 6)
x = c(x1,x2,x3)
f = factor(c(rep("Caseros",length(x1)),rep("Santos Lugares",length(x2)),rep("Pablo Podesta",length(x3))))
test1 = aov(x~f)
summary(test1)
?boxplot
boxplot(x~f)
boxplot(x~f, xlab = "Localidad", ylab="Asistencia", main="Asistencia a clases no Obligatorias por Localidad")
plotmeans(x~f)
plotMeans(x~f)
library(gplots)
plotmeans(x~f)
length(x1)
length(x2)
plotmeans(x~f, xlab="Localidad", ylab="Asistencia", main="Asistencia Media a clases no Obligatorias por Localidad")
print(TuckeyHSD(test1))
print(TukeyHSD(test1))
plot(TukeyHSD(test1))
boxplot(x~f, xlab = "Localidad", ylab="Asistencia", main="Asistencia a clases no Obligatorias por Localidad")
plotmeans(x~f, xlab="Localidad", ylab="Asistencia", main="Asistencia Media a clases no Obligatorias por Localidad")
#c) hago test anova
test1 = aov(x~f)
summary(test1)
#f) realizo el test de tukey
print(TukeyHSD(test1))
plot(TukeyHSD(test1))
nottem = data("nottem")
nottem
data("nottem")
nottem
nottem.ts = ts(nottem, start=c(1920,1), frequency = 12)
nottem.ts
plot(nottem.ts)
start(nottem.ts)
end(nottem.ts)
plot(nottem.ts, xlab="Fecha", ylab="Temperatura Promedio", main="Temperatura Promedio en la ciudad de  Nottinham")
decompose(nottem.ts)
plot(decompose(nottem.ts))
deco = decompose(nottem.ts)
plot(deco$trend)
plot(deco$trend, xlab="Fecha", ylab="Temperatura Promedio", main="Tendencia de la Temperatura Promedio en la ciudad de  Nottinham")
plot(deco$trend, xlab="Fecha", ylab="Temperatura Promedio", main="Tendencia de la Temperatura Promedio")
boxplot(nottem.ts ~ cycle(nottem.ts))
boxplot(nottem.ts ~ cycle(nottem.ts), xlab="Mes", ylab="Temperatura Promedio", main="Estacionalidad de la Temperatura Promedio"))
boxplot(nottem.ts ~ cycle(nottem.ts), xlab="Mes", ylab="Temperatura Promedio", main="Estacionalidad de la Temperatura Promedio")
#b) temp inicial y final
start(nottem.ts)
end(nottem.ts)
train.ts = ts(nottem, start=c(1920,1), end =c(1938,12), frequency = 12)
test.ts = ts(nottem, start=c(1939,1), end =c(1939,12), frequency = 12)
install.packages("forecast")
library(forecast)
arima1 <- auto.arima(train.ts, stationary =FALSE, seasonal = TRUE)
summary(arima1)
ajuste<- forecast(arima1, h =12)
ajuste
ajuste$mean
plot(ajuste)
test.ts
mean((test.ts-ajuste$mean)^2)
as.data.frame(ajuste$mean)
summary(arima1)
cbind(test.ts,ajuste$mean)
mean((test.ts-ajuste$mean)^2)
library( "IRkernel" )
install.packages("IRkernel")
library( "IRkernel" )
IRkernel::installspec()
quit()
source("~/ECD/DataMining/labo/src/rpart/z321_rpart_BO.r")
source("~/ECD/DataMining/labo/src/rpart/z321_rpart_BO.r")
install.packages("rlist")
install.packages("DiceKriging")
install.packages("mlrMBO")
source("~/ECD/DataMining/labo/src/rpart/z321_rpart_BO.r")
source("~/ECD/DataMining/labo/src/rpart/z321_rpart_BO.r")
